name: Deploy (Infra + Docker)

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '!docs/**'
      - '.github/workflows/deploy.yml'

  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # üßæ Checkout
    - name: Checkout repo
      uses: actions/checkout@v4

    # üîê AWS Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # üèó Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3


        
        
    - name: Terraform Init
      run: terraform init
      working-directory: src/infra
        
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: src/infra
      
    # - name: Terraform Destroy
    #   run: terraform destroy -auto-approve
    #   working-directory: src/infra


    - name: Terraform Apply
      run: terraform apply -auto-approve 
      working-directory: src/infra

    # üê≥ Docker Build & Push
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      

    - name: Build Docker Image
      run: docker build -t iskandarem:v1 src/
    
    - name: Tag and Push Docker Image
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        docker tag iskandarem:v1 $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest
    - name: Force ECS Redeploy
      env:
        SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        CLUSTER: ${{ secrets.CLUSTER}}
      run: |
        aws ecs update-service \
          --service $SERVICE_NAME \
          --cluster $CLUSTER \
          --force-new-deployment